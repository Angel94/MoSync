/*
 Copyright (C) 2012 MoSync AB

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License,
 version 2, as published by the Free Software Foundation.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 MA 02110-1301, USA.
 */

/*! \addtogroup PurchaseLib
 *  @{
 */

/**
 *  @defgroup PurchaseLib Purchase Library
 *  @{
 */

/**
 * @file PurchaseManager.h
 * @author Bogdan Iusco
 * @date 3 May 2012
 *
 * @brief The PurchaseManager manages purchase related events and dispatches
 * them to the target products.
 */

#ifndef PURCHASE_MANAGER_H_
#define PURCHASE_MANAGER_H_

#include <MAUtil/String.h>
#include <MAUtil/Map.h>
#include <MAUtil/Environment.h>

namespace Purchase
{

	// Forward declarations.
	class Product;
	class PurchaseManagerListener;

	/**
	 * Apple App Store URL.
	 * Used to verify a receipt.
	 */
	const MAUtil::String sAppStoreURL =
		"https://buy.itunes.apple.com/verifyReceipt";

	/**
	 * Apple Sandbox URL.
	 * Used to verify a receipt(testing purpose).
	 */
	const MAUtil::String sAppStoreSandboxURL =
		"https://sandbox.itunes.apple.com/verifyReceipt";

	/**
	 * @brief Class that handles purchase related events.
	 */
	class PurchaseManager : public MAUtil::CustomEventListener
	{
	public:
		/**
		*  Check if in app purchase is supported/enabled on a device.
		* @return One of the next result codes:
		* - MA_PURCHASE_RES_OK if purchase is supported/allowed on the device.
		* - MA_PURCHASE_RES_DISABLED if purchase is not allowed/enabled.
		*/
		static int checkPurchaseSupported();

		/**
		 * Return the single instance of this class.
		 */
		static PurchaseManager* getInstance();

		/**
		 * Destroy the single instance of this class.
		 * Call this method only when the application will exit.
		 */
		static void destroyInstance();

		/**
		 * Platform: Android.
		 * @param developerPublicKey
		 */
		void setPublicKey(const MAUtil::String& developerPublicKey);

		/**
		 * Set the store URL used for verifying the receipt on iOS platform.
		 * Platform: iOS.
		 * @param url Recommended values: sAppStoreURL and sAppStoreSandboxURL.
		 */
		void setStoreURL(const MAUtil::String& url);

		/**
		 * Implementation of CustomEventListener interface.
		 * This method will get called whenever there is a
		 * widget event generated by the system.
		 * @param event The new received event.
		 */
		void customEvent(const MAEvent& event);

		/**
		 * Add a product to the map that holds products.
		 * The product will receive custom events.
		 * @param product The product that needs to be registered.
		 * The ownership of the product is not passed to this method.
		 */
		void registerProduct(Product* product);

		/**
		 * Remove a product from the map that holds products.
		 * The product will not receive custom events.
		 * @param product The product that needs to be unregistered.
		 */
		void unregisterProduct(Product* product);

		/**
		 * Add an event listener for purchase.
		 * Listener will be notified about restored or refunded products.
		 * @param listener The listener that will receive notifications.
		 */
		void addPurchaseListener(PurchaseManagerListener* listener);

		/**
		 * Remove the event listener for purchase.
		 * @param listener The listener that receives purchase notifications.
		 */
		void removePurchaseListener(PurchaseManagerListener* listener);

	private:
		/**
		 * Constructor is private since this is a singleton.
		 */
		PurchaseManager();

		/**
		 * Destructor.
		 */
		virtual ~PurchaseManager();

		/**
		 * Create a product that has been restored and notifies the listeners.
		 * @param productHandle Handle to the product that has been restored.
		 */
		void createRestoredProduct(MAHandle productHandle);

		/**
		 * Create a product that has been refunded and notifies the listeners.
		 * @param productHandle Handle to the product that has been refunded.
		 */
		void createRefundedProduct(MAHandle productHandle);

	private:
		/**
		 * The single instance of this class.
		 */
		static PurchaseManager* sInstance;

		/**
		 * Dictionary of products identified by product handle.
		 */
		MAUtil::Map<MAHandle, Product*> mProductMap;

		/**
		 * Array with listeners.
		 */
		MAUtil::Vector<PurchaseManagerListener*> mListeners;

		/**
		 * Store restored and refunded products.
		 */
		MAUtil::Vector<Product*> mSpecialProducts;
	};

} // namespace Purchase

#endif /* PURCHASE_MANAGER_H_ */

/*! @} */
