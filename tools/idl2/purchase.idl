group PurchaseResultCodes "Purchase Result Codes" {
	constset int MA_PURCHASE_RES_ {
        /**
        * \brief No error occurred.
        */
		OK = 0;
        /**
        * \brief
        */
		UNAVAILABLE = -1;
        /**
        * \brief
        */
		ERROR = -2;
        /**
        * \brief
        */
		DEVELOPER_ERROR = -3;
        /**
        * \brief
        */
		OUT_OF_DATE = -4;
        /**
        * \brief
        */
		USER_CANCELED = -6;
        /**
        * \brief
        */
		SERVICE_UNAVAILABLE = -7;
        /**
        * \brief
        */
		ITEM_UNAVAILABLE = -8;
        /**
        * \brief
        */
		ITEM_ALREADY_PURCHASED = -9;
        /**
        * \brief
        */
		CLIENT_INVALID = -10;
        /**
        * \brief Returned by the #maPurchaseCreate() syscall if the productID string is empty.
        * Platform: Android and iOS.
        */
		INVALID = -11;
        /**
        * \brief
        */
		NOT_ALLOWED = -12;
        /**
        * \brief Returned by the #maPurchaseSupported() syscall if purchase is not allowed on the device.
        * Platform: iOS.
        */
		DISABLED = -13;
        /**
        * \brief Returned by the #maPurchaseGetName() or  maPurchaseVerifyReceipt syscalls if the
        * productHandle is invalid.
        */
		INVALID_HANDLE = -14;
        /**
        * \brief Returned by the #maPurchaseGetName() syscall if the the given buffer is too small.
        */
		BUFFER_TOO_SMALL = -15;
        /**
        * \brief Returned by the #maPurchaseVerifyReceipt() syscall if the product has not been purchased.
        */
		RECEIPT = -16;
        /**
        * \brief Returned by the #maPurchaseGetField() syscall if the receipt has not been received or
        * if the transaction is invalid.
        */
		RECEIPT_NOT_AVAILABLE = -17;
        /**
        * \brief Returned by the #maPurchaseGetField() syscall if the receipt does not contain the given field.
        */
		INVALID_FIELD_NAME = -18;
	}
} // end of Purchase Result Codes

group PurchaseStateCodes "Purchase State Codes" {
	constset int MA_PURCHASE_STATE_ {
        /**
        * \brief Send by the #maPurchaseRequest syscall if the operation failed.
        * Check the errorCode variable from event's purchaseData struct for more info.
        */
		FAILED = 0;
        /**
        * \brief Send by the #maPurchaseRequest syscall when the transaction has been received by the
        * Apple App Store/Google Play.
        */
		IN_PROGRESS = 1;
        /**
        * \brief Send by the #maPurchaseRequest syscall when the transaction has been successfully
        * processed. Your application should provide the content the user purchased.
        */
		COMPLETED = 2;
        /**
        * \brief Send by #maPurchaseRestoreTransactions syscall.
        */
		RESTORED = 3;
	}
} // end of Purchase State Codes

group PurchaseErrorCodes "Purchase Error Codes" {
	constset int MA_PURCHASE_ERROR_ {
        /**
        * \brief Sent by the #maPurchaseRequest syscall if the given product handle is invalid.
        */
		INVALID_HANDLE = -1;
        /**
        * \brief Possible error code for #MA_PURCHASE_EVENT_RECEIPT_ERROR.
        * Indicates that the connection with the App Store / Google Play has failed.
        */
		CONNECTION_FAILED = -2;
        /**
        * \brief Possible error code for #MA_PURCHASE_EVENT_RECEIPT_ERROR.
        * Indicates that response from App Store / Google Play for verifying a receipt
        * cannot be parsed.
        */
		CANNOT_PARSE_RECEIPT = -3;
	}
} // end of Purchase Error Codes

group PurchaseEventTypes "Purchase Event Types" {
	constset int MA_PURCHASE_EVENT_ {
        /**
        * \brief Send by the #maPurchaseRequest syscall after an operation step has been completed
        * or if the operation has failed. Check event's purchaseData struct variable
        * for more information.
        */
		REQUEST_STATE_CHANGED = 0;
        /**
        * \brief
        */
		REFUNDED = 1;
        /**
        * \brief Send after a new product has been created or by the #maPurchaseRequest syscall.
        * Platform: iOS.
        */
		RESTORED = 2;
        /**
        * \brief Notifies that a product is valid in the store.
        * Sent after calling #maPurchaseCreate() syscall.
        */
		PRODUCT_VALID = 3;
        /**
        * \brief Notifies that a product is not valid in the store.
        * Sent after calling #maPurchaseCreate() syscall.
        */
		PRODUCT_INVALID = 4;
        /**
        * \brief The receipt has been validated by the App Store / Google Play.
        * Sent after calling the #maPurchaseVerifyReceipt() syscall.
        */
		RECEIPT_VALID = 5;
        /**
        * \brief The receipt is not valid.
        * Sent after calling the #maPurchaseVerifyReceipt() syscall.
        */
		RECEIPT_INVALID = 6;
        /**
        * \brief An error has occurred while verifying the receipt.
        * Check the error code for more information.
        * Sent after calling the #maPurchaseVerifyReceipt() syscall.
        */
		RECEIPT_ERROR = 7;
	}
} // end of Purchase Event Types

group PurchaseReceiptFields "Purchase Receipt Fields" {
	constset MAString MA_PURCHASE_RECEIPT_ {
        /**
        * \brief The number of items purchased.
        * Platform: iOS.
        */
		QUANTITY = "quantity";
        /**
        * \brief The product identifier of the item that was purchased.
        * Platform: iOS.
        */
		PRODUCT_ID = "product_id";
        /**
        * \brief The transaction identifier of the item that was purchased.
        * Platform: iOS.
        */
		TRANSACTION_ID = "transaction_id";
        /**
        * \brief The date and time this transaction occurred.
        * Platform: iOS.
        */
		PURCHASE_DATE = "purchase_date";
        /**
        * \brief For a transaction that restores a previoustransaction, this holdsthe original
        * purchase date.
        * Platform: iOS.
        */
		ORIGINAL_TRANSACTION_ID = "original_transaction_id";
        /**
        * \brief A string that the App Store uses to uniquely identify the application that
        * created the payment transaction. If your server supports multiple
        * applications, you can use this value to differentiate between them.
        * Applications that are executing in the sandbox do not yet have an
        * app-item-id assigned to them,so this key is missing from receipts created
        * by the sandbox.
        * Platform: iOS.
        */
		APP_ITEM_ID = "app_item_id";
        /**
        * \brief An arbitrary number that uniquely identifies a revision of your application.
        * This key is missing in receipts created by the sandbox.
        * Platform: iOS.
        */
		VERSION_EXTERNAL_IDENTIFIER = "version_external_identifier";
        /**
        * \brief The bundle identifier for the application.
        * Platform: iOS.
        */
		BID = "bid";
        /**
        * \brief A version number for the application.
        * Platform: iOS.
        */
		BVRS = "bvrs";
	}
} // end of Purchase Receipt Fields

group PurchaseFunctions "Purchase Functions" {
	/**
	* \brief Check if in app purchase is supported/enabled on a device.
	*
	* \returns One of the next result codes:
	* - #MA_PURCHASE_RES_OK if purchase is supported/allowed on the device.
	* - #MA_PURCHASE_RES_DISABLED if purchase is not allowed/enabled.
	*/
	int maPurchaseSupported();

	/**
	* \brief Create a product object.
	* \param productID String that identifies the product.
	*
	* \return #MA_PURCHASE_RES_INVALID if productID string is empty,
	*  otherwise a handle to the product object.
	*/
	MAHandle maPurchaseCreate(in MAString productID);

	/**
	*
	*
	*
	*/
	void maPurchaseSetPublicKey(in MAString developerPublicKey);

	/**
	*
	*
	*
	*/
	void maPurchaseRequest(in MAHandle productHandle);

	/**
	* Verify if the receipt came from Apple App Store / Google Play.
	* Make sure that the product is purchased before calling this syscall.
	* @param productHandle Handle to the product that has been purchased.
	* @return One of the next syscalls:
	* - #MA_PURCHASE_RES_OK if the request has been send to the store for verifying.
	* - #MA_PURCHASE_RES_INVALID_HANDLE if the productHandle is invalid.
	* - #MA_PURCHASE_RES_RECEIPT if the product has not been purchased.
	*/
	int maPurchaseVerifyReceipt(in MAHandle productHandle);

	/**
	*
	*
	*
	*/
	int maPurchaseGetField(in MAHandle productHandle, in MAString property,
					   out MAString buffer range("bufferSize"), in int bufferSize);

	/**
	* Set the store url used for verifing the receipe on iOS platform.
	* Pltform: iOS.
	* @param url Store url.
	*/
	void maPurchaseSetStoreURL(in MAString url);

	/**
	* Get product id using a product handle.
	* @param productHandle Handle to the given product.
	* @param buffer Will contain the product id.
	* @param bufferSize Maximum size of the buffer.
	* @return In case of error:
	* - #MA_PURCHASE_RES_INVALID_HANDLE if productHandle is invalid.
	* - #MA_PURCHASE_RES_BUFFER_TOO_SMALL if the given handle is too small.
	* In case of success returns the number of written bytes.
	*/
	int maPurchaseGetName(in MAHandle productHandle, out MAString buffer range("bufferSize"), in int bufferSize);

	/**
	*
	*
	*
	*/
	void maPurchaseRestoreTransactions();

	/**
	* Destroy a product object.
	* @param productHandle Handle to the product to destroy.
	* If the given handle is invalid the method does nothing.
	*/
	void maPurchaseDestroy(in MAHandle productHandle);
}
